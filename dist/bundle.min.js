"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var React=require("react"),effectorReact=require("effector-react"),effectorNext=require("effector-next");function _interopDefaultLegacy(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var React__default=_interopDefaultLegacy(React);function getDefaultExportFromCjs(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var linkExports={},link$1={get exports(){return linkExports},set exports(e){linkExports=e}},link={};function _typeof$1(e){return _typeof_1=_typeof$1="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$1(e)}var _typeof_1=_typeof$1,_typeof=_typeof_1;function _getRequireWildcardCache(){var e;return"function"!=typeof WeakMap?null:(e=new WeakMap,_getRequireWildcardCache=function(){return e},e)}function _interopRequireWildcard$1(e){if(e&&e.__esModule)return e;if(null===e||"object"!==_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache();if(t&&t.has(e))return t.get(e);var r,o,a={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(r in e)Object.prototype.hasOwnProperty.call(e,r)&&((o=n?Object.getOwnPropertyDescriptor(e,r):null)&&(o.get||o.set)?Object.defineProperty(a,r,o):a[r]=e[r]);return a.default=e,t&&t.set(e,a),a}var hasRequiredNormalizeTrailingSlash,interopRequireWildcard=_interopRequireWildcard$1,router$1={},normalizeTrailingSlash={};function requireNormalizeTrailingSlash(){var e;return hasRequiredNormalizeTrailingSlash||(hasRequiredNormalizeTrailingSlash=1,normalizeTrailingSlash.__esModule=!0,normalizeTrailingSlash.removePathTrailingSlash=t,normalizeTrailingSlash.normalizePathTrailingSlash=void 0,e=process.env.__NEXT_TRAILING_SLASH?e=>/\.[^/]+\/?$/.test(e)?t(e):e.endsWith("/")?e:e+"/":t,normalizeTrailingSlash.normalizePathTrailingSlash=e),normalizeTrailingSlash;function t(e){return e.endsWith("/")&&"/"!==e?e.slice(0,-1):e}}var interopRequireDefault,hasRequiredInteropRequireDefault,routeLoader={};function requireInteropRequireDefault(){return hasRequiredInteropRequireDefault||(hasRequiredInteropRequireDefault=1,interopRequireDefault=function(e){return e&&e.__esModule?e:{default:e}}),interopRequireDefault}var hasRequiredGetAssetPathFromRoute,getAssetPathFromRoute={};function requireGetAssetPathFromRoute(){return hasRequiredGetAssetPathFromRoute||(hasRequiredGetAssetPathFromRoute=1,getAssetPathFromRoute.__esModule=!0,getAssetPathFromRoute.default=function(e,t=""){e="/"===e?"/index":/^\/index(\/|$)/.test(e)?"/index"+e:""+e;return e+t}),getAssetPathFromRoute}var hasRequiredRequestIdleCallback,hasRequiredRouteLoader,requestIdleCallback={};function requireRequestIdleCallback(){var e;return hasRequiredRequestIdleCallback||(hasRequiredRequestIdleCallback=1,requestIdleCallback.__esModule=!0,requestIdleCallback.cancelIdleCallback=requestIdleCallback.requestIdleCallback=void 0,e="undefined"!=typeof self&&self.requestIdleCallback||function(e){let t=Date.now();return setTimeout(function(){e({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-t))}})},1)},requestIdleCallback.requestIdleCallback=e,e="undefined"!=typeof self&&self.cancelIdleCallback||function(e){return clearTimeout(e)},requestIdleCallback.cancelIdleCallback=e),requestIdleCallback}function requireRouteLoader(){if(!hasRequiredRouteLoader){hasRequiredRouteLoader=1;var e=requireInteropRequireDefault(),o=(routeLoader.__esModule=!0,routeLoader.markAssetError=h,routeLoader.isAssetError=function(e){return e&&r in e},routeLoader.getClientBuildManifest=a,routeLoader.default=void 0,e(requireGetAssetPathFromRoute())),c=requireRequestIdleCallback();const d=3800,n=function(e){try{return e=document.createElement("link"),!!window.MSInputMethodContext&&!!document.documentMode||e.relList.supports("prefetch")}catch(e){return!1}}(),r=Symbol("ASSET_LOAD_ERROR");function t(e,t,r){var o=t.get(e);if(o)return"future"in o?o.future:Promise.resolve(o);let a;o=new Promise(e=>{a=e});return t.set(e,{resolve:a,future:o}),r?r().then(e=>(a(e),e)):o}function h(e){return Object.defineProperty(e,r,{})}function p(o,a,n){return new Promise((t,e)=>{let r=!1;o.then(e=>{r=!0,t(e)}).catch(e),(0,c.requestIdleCallback)(()=>setTimeout(()=>{r||e(n)},a))})}function a(){return self.__BUILD_MANIFEST?Promise.resolve(self.__BUILD_MANIFEST):p(new Promise(e=>{const t=self.__BUILD_MANIFEST_CB;self.__BUILD_MANIFEST_CB=()=>{e(self.__BUILD_MANIFEST),t&&t()}}),d,h(new Error("Failed to load client build manifest")))}function f(t,r){return"development"===process.env.NODE_ENV?Promise.resolve({scripts:[t+"/_next/static/chunks/pages"+encodeURI((0,o.default)(r,".js"))],css:[]}):a().then(e=>{if(r in e)return{scripts:(e=e[r].map(e=>t+"/_next/"+encodeURI(e))).filter(e=>e.endsWith(".js")),css:e.filter(e=>e.endsWith(".css"))};throw h(new Error("Failed to lookup route: "+r))})}routeLoader.default=function(i){const s=new Map,a=new Map,r=new Map,e=new Map;function l(e){var r,o,t=a.get(e);if(!t){if(document.querySelector(`script[src^="${e}"]`))return Promise.resolve();a.set(e,(r=e,t=new Promise((e,t)=>{(o=document.createElement("script")).onload=e,o.onerror=()=>t(h(new Error("Failed to load script: "+r))),o.crossOrigin=process.env.__NEXT_CROSS_ORIGIN,o.src=r,document.body.appendChild(o)})))}return t}function u(t){var e=r.get(t);return e||r.set(t,e=fetch(t).then(e=>{if(e.ok)return e.text().then(e=>({href:t,content:e}));throw new Error("Failed to load stylesheet: "+t)}).catch(e=>{throw h(e)})),e}return{whenEntrypoint(e){return t(e,s)},onEntrypoint(r,e){Promise.resolve(e).then(e=>e()).then(e=>({component:e&&e.default||e,exports:e}),e=>({error:e})).then(e=>{var t=s.get(r);s.set(r,e),t&&"resolve"in t&&t.resolve(e)})},loadRoute(n){return t(n,e,async()=>{try{var{scripts:e,css:t}=await f(i,n),[,r]=await Promise.all([s.has(n)?[]:Promise.all(e.map(l)),Promise.all(t.map(u))]),o=await p(this.whenEntrypoint(n),d,h(new Error("Route did not complete loading: "+n))),a=Object.assign({styles:r},o);return"error"in o?o:a}catch(e){return{error:e}}})},prefetch(e){var t;return(t=navigator.connection)&&(t.saveData||/2g/.test(t.effectiveType))?Promise.resolve():f(i,e).then(e=>Promise.all(n?e.scripts.map(e=>{return r=e,o="script",new Promise((e,t)=>{if(document.querySelector(`link[rel="prefetch"][href^="${r}"]`))return e();a=document.createElement("link"),o&&(a.as=o),a.rel="prefetch",a.crossOrigin=process.env.__NEXT_CROSS_ORIGIN,a.onload=e,a.onerror=t,a.href=r,document.head.appendChild(a)});var r,o,a}):[])).then(()=>{(0,c.requestIdleCallback)(()=>this.loadRoute(e))}).catch(()=>{})}}}}return routeLoader}var hasRequiredDenormalizePagePath,denormalizePagePath={};function requireDenormalizePagePath(){return hasRequiredDenormalizePagePath||(hasRequiredDenormalizePagePath=1,denormalizePagePath.__esModule=!0,denormalizePagePath.normalizePathSep=t,denormalizePagePath.denormalizePagePath=function(e){(e=t(e)).startsWith("/index/")?e=e.slice(6):"/index"===e&&(e="/");return e}),denormalizePagePath;function t(e){return e.replace(/\\/g,"/")}}var hasRequiredNormalizeLocalePath,normalizeLocalePath={};function requireNormalizeLocalePath(){return hasRequiredNormalizeLocalePath||(hasRequiredNormalizeLocalePath=1,normalizeLocalePath.__esModule=!0,normalizeLocalePath.normalizeLocalePath=function(t,e){let r;const o=t.split("/");return(e||[]).some(e=>o[1].toLowerCase()===e.toLowerCase()&&(r=e,o.splice(1,1),t=o.join("/")||"/",!0)),{pathname:t,detectedLocale:r}}),normalizeLocalePath}var hasRequiredMitt,mitt={};function requireMitt(){return hasRequiredMitt||(hasRequiredMitt=1,mitt.__esModule=!0,mitt.default=function(){const r=Object.create(null);return{on(e,t){(r[e]||(r[e]=[])).push(t)},off(e,t){r[e]&&r[e].splice(r[e].indexOf(t)>>>0,1)},emit(e,...t){(r[e]||[]).slice().map(e=>{e(...t)})}}}),mitt}var hasRequiredQuerystring,hasRequiredFormatUrl,hasRequiredUtils,utils={},formatUrl={},querystring={};function requireQuerystring(){return hasRequiredQuerystring||(hasRequiredQuerystring=1,querystring.__esModule=!0,querystring.searchParamsToUrlQuery=function(e){const r={};return e.forEach((e,t)=>{void 0===r[t]?r[t]=e:Array.isArray(r[t])?r[t].push(e):r[t]=[r[t],e]}),r},querystring.urlQueryToSearchParams=function(e){const r=new URLSearchParams;return Object.entries(e).forEach(([t,e])=>{Array.isArray(e)?e.forEach(e=>r.append(t,o(e))):r.set(t,o(e))}),r},querystring.assign=function(r,...e){return e.forEach(e=>{Array.from(e.keys()).forEach(e=>r.delete(e)),e.forEach((e,t)=>r.append(t,e))}),r}),querystring;function o(e){return"string"==typeof e||"number"==typeof e&&!isNaN(e)||"boolean"==typeof e?String(e):""}}function requireFormatUrl(){if(!hasRequiredFormatUrl){hasRequiredFormatUrl=1,formatUrl.__esModule=!0,formatUrl.formatUrl=function(e){let{auth:t,hostname:r}=e,o=e.protocol||"",a=e.pathname||"",n=e.hash||"",i=e.query||"",s=!1;t=t?encodeURIComponent(t).replace(/%3A/i,":")+"@":"",e.host?s=t+e.host:r&&(s=t+(~r.indexOf(":")?`[${r}]`:r),e.port)&&(s+=":"+e.port);i&&"object"==typeof i&&(i=String(u.urlQueryToSearchParams(i)));let l=e.search||i&&"?"+i||"";o&&":"!==o.substr(-1)&&(o+=":");e.slashes||(!o||c.test(o))&&!1!==s?(s="//"+(s||""),a&&"/"!==a[0]&&(a="/"+a)):s=s||"";n&&"#"!==n[0]&&(n="#"+n);l&&"?"!==l[0]&&(l="?"+l);return a=a.replace(/[?#]/g,encodeURIComponent),l=l.replace("#","%23"),""+o+s+a+l+n};var u=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=i();if(t&&t.has(e))return t.get(e);var r,o={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(r in e){var n;Object.prototype.hasOwnProperty.call(e,r)&&((n=a?Object.getOwnPropertyDescriptor(e,r):null)&&(n.get||n.set)?Object.defineProperty(o,r,n):o[r]=e[r])}o.default=e,t&&t.set(e,o);return o}(requireQuerystring());const c=/https?|ftp|gopher|file/;function i(){var e;return"function"!=typeof WeakMap?null:(e=new WeakMap,i=function(){return e},e)}}return formatUrl}function requireUtils(){if(!hasRequiredUtils){hasRequiredUtils=1,utils.__esModule=!0,utils.execOnce=function(t){let r=!1,o;return(...e)=>(r||(r=!0,o=t(...e)),o)},utils.getLocationOrigin=r,utils.getURL=function(){var e=window.location["href"],t=r();return e.substring(t.length)},utils.getDisplayName=l,utils.isResSent=u,utils.loadGetInitialProps=async function e(t,r){if("production"!==process.env.NODE_ENV){var o;if(null!=(o=t.prototype)&&o.getInitialProps){const i=`"${l(t)}.getInitialProps()" is defined as an instance method - visit https://nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.`;throw new Error(i)}}const a=r.res||r.ctx&&r.ctx.res;if(!t.getInitialProps)return r.ctx&&r.Component?{pageProps:await e(r.Component,r.ctx)}:{};const n=await t.getInitialProps(r);if(a&&u(a))return n;if(!n){const s=`"${l(t)}.getInitialProps()" should resolve to an object. But found "${n}" instead.`;throw new Error(s)}"production"===process.env.NODE_ENV||0!==Object.keys(n).length||r.ctx||console.warn(l(t)+" returned an empty object from `getInitialProps`. This de-optimizes and prevents automatic static optimization. https://nextjs.org/docs/messages/empty-object-getInitialProps");return n},utils.formatWithValidation=function(e){"development"===process.env.NODE_ENV&&null!==e&&"object"==typeof e&&Object.keys(e).forEach(e=>{-1===o.indexOf(e)&&console.warn("Unknown key passed via urlObject into url.format: "+e)});return(0,t.formatUrl)(e)},utils.ST=utils.SP=utils.urlObjectKeys=void 0;var t=requireFormatUrl();const o=["auth","hash","host","hostname","href","path","pathname","port","protocol","query","search","slashes"];utils.urlObjectKeys=o;var e="undefined"!=typeof performance,e=(utils.SP=e)&&"function"==typeof performance.mark&&"function"==typeof performance.measure;function r(){var{protocol:e,hostname:t,port:r}=window.location;return e+"//"+t+(r?":"+r:"")}function l(e){return"string"==typeof e?e:e.displayName||e.name||"Unknown"}function u(e){return e.finished||e.headersSent}utils.ST=e}return utils}var hasRequiredIsDynamic,isDynamic={};function requireIsDynamic(){if(!hasRequiredIsDynamic){hasRequiredIsDynamic=1,isDynamic.__esModule=!0,isDynamic.isDynamicRoute=function(e){return t.test(e)};const t=/\/\[[^/]+?\](?=\/|$)/}return isDynamic}var hasRequiredParseRelativeUrl,parseRelativeUrl={};function requireParseRelativeUrl(){var l,u;return hasRequiredParseRelativeUrl||(hasRequiredParseRelativeUrl=1,parseRelativeUrl.__esModule=!0,parseRelativeUrl.parseRelativeUrl=function(e,t){var r=new URL("undefined"==typeof window?"http://n":(0,l.getLocationOrigin)()),t=t?new URL(t,r):r,{pathname:t,searchParams:o,search:a,hash:n,href:i,origin:s}=new URL(e,t);if(s===r.origin)return{pathname:t,query:(0,u.searchParamsToUrlQuery)(o),search:a,hash:n,href:i.slice(r.origin.length)};throw new Error("invariant: invalid relative URL, router received "+e)},l=requireUtils(),u=requireQuerystring()),parseRelativeUrl}var hasRequiredPathToRegexp,hasRequiredPathMatch,resolveRewrites={},pathMatch={},pathToRegexp={};function requirePathToRegexp(){return hasRequiredPathToRegexp||(hasRequiredPathToRegexp=1,Object.defineProperty(pathToRegexp,"__esModule",{value:!0}),pathToRegexp.parse=u,pathToRegexp.compile=function(e,t){return r(u(e,t),t)},pathToRegexp.tokensToFunction=r,pathToRegexp.match=function(e,t){var r=[];return o(h(e,r,t),r,t)},pathToRegexp.regexpToFunction=o,pathToRegexp.tokensToRegexp=c,pathToRegexp.pathToRegexp=h),pathToRegexp;function u(e,t){void 0===t&&(t={});for(var o=function(e){for(var t=[],r=0;r<e.length;){var o=e[r];if("*"===o||"+"===o||"?"===o)t.push({type:"MODIFIER",index:r,value:e[r++]});else if("\\"===o)t.push({type:"ESCAPED_CHAR",index:r++,value:e[r++]});else if("{"===o)t.push({type:"OPEN",index:r,value:e[r++]});else if("}"===o)t.push({type:"CLOSE",index:r,value:e[r++]});else if(":"===o){for(var a="",n=r+1;n<e.length;){var i=e.charCodeAt(n);if(!(48<=i&&i<=57||65<=i&&i<=90||97<=i&&i<=122||95===i))break;a+=e[n++]}if(!a)throw new TypeError("Missing parameter name at "+r);t.push({type:"NAME",index:r,value:a}),r=n}else if("("===o){var s=1,l="";if("?"===e[n=r+1])throw new TypeError('Pattern cannot start with "?" at '+n);for(;n<e.length;)if("\\"===e[n])l+=e[n++]+e[n++];else{if(")"===e[n]){if(0===--s){n++;break}}else if("("===e[n]&&(s++,"?"!==e[n+1]))throw new TypeError("Capturing groups are not allowed at "+n);l+=e[n++]}if(s)throw new TypeError("Unbalanced pattern at "+r);if(!l)throw new TypeError("Missing pattern at "+r);t.push({type:"PATTERN",index:r,value:l}),r=n}else t.push({type:"CHAR",index:r,value:e[r++]})}return t.push({type:"END",index:r,value:""}),t}(e),e=t.prefixes,r=void 0===e?"./":e,a="[^"+_(t.delimiter||"/#?")+"]+?",n=[],i=0,s=0,l="",u=function(e){if(s<o.length&&o[s].type===e)return o[s++].value},c=function(e){var t=u(e);if(void 0!==t)return t;var t=o[s],r=t.type,t=t.index;throw new TypeError("Unexpected "+r+" at "+t+", expected "+e)},h=function(){for(var e,t="";e=u("CHAR")||u("ESCAPED_CHAR");)t+=e;return t};s<o.length;){var p,f=u("CHAR"),d=u("NAME"),m=u("PATTERN");d||m?(-1===r.indexOf(p=f||"")&&(l+=p,p=""),l&&(n.push(l),l=""),n.push({name:d||i++,prefix:p,suffix:"",pattern:m||a,modifier:u("MODIFIER")||""})):(d=f||u("ESCAPED_CHAR"))?l+=d:(l&&(n.push(l),l=""),u("OPEN")?(p=h(),m=u("NAME")||"",f=u("PATTERN")||"",d=h(),c("CLOSE"),n.push({name:m||(f?i++:""),pattern:m&&!f?a:f,prefix:p,suffix:d,modifier:u("MODIFIER")||""})):c("END"))}return n}function r(u,e){var t=v(e=void 0===e?{}:e),r=e.encode,c=void 0===r?function(e){return e}:r,r=e.validate,h=void 0===r||r,p=u.map(function(e){if("object"==typeof e)return new RegExp("^(?:"+e.pattern+")$",t)});return function(e){for(var t="",r=0;r<u.length;r++){var o=u[r];if("string"==typeof o)t+=o;else{var a=e?e[o.name]:void 0,n="?"===o.modifier||"*"===o.modifier,i="*"===o.modifier||"+"===o.modifier;if(Array.isArray(a)){if(!i)throw new TypeError('Expected "'+o.name+'" to not repeat, but got an array');if(0===a.length){if(n)continue;throw new TypeError('Expected "'+o.name+'" to not be empty')}for(var s=0;s<a.length;s++){var l=c(a[s],o);if(h&&!p[r].test(l))throw new TypeError('Expected all "'+o.name+'" to match "'+o.pattern+'", but got "'+l+'"');t+=o.prefix+l+o.suffix}}else if("string"==typeof a||"number"==typeof a){l=c(String(a),o);if(h&&!p[r].test(l))throw new TypeError('Expected "'+o.name+'" to match "'+o.pattern+'", but got "'+l+'"');t+=o.prefix+l+o.suffix}else if(!n)throw new TypeError('Expected "'+o.name+'" to be '+(i?"an array":"a string"))}}return t}}function o(n,i,e){var e=(e=void 0===e?{}:e).decode,s=void 0===e?function(e){return e}:e;return function(e){var r=n.exec(e);if(!r)return!1;for(var e=r[0],t=r.index,o=Object.create(null),a=1;a<r.length;a++)!function(e){if(void 0===r[e])return;var t=i[e-1];"*"===t.modifier||"+"===t.modifier?o[t.name]=r[e].split(t.prefix+t.suffix).map(function(e){return s(e,t)}):o[t.name]=s(r[e],t)}(a);return{path:e,index:t,params:o}}}function _(e){return e.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1")}function v(e){return e&&e.sensitive?"":"i"}function c(e,t,r){for(var o=(r=void 0===r?{}:r).strict,o=void 0!==o&&o,a=r.start,a=void 0===a||a,n=r.end,n=void 0===n||n,i=r.encode,s=void 0===i?function(e){return e}:i,i="["+_(r.endsWith||"")+"]|$",l="["+_(r.delimiter||"/#?")+"]",u=a?"^":"",c=0,h=e;c<h.length;c++){var p,f,d,m=h[c];"string"==typeof m?u+=_(s(m)):(p=_(s(m.prefix)),f=_(s(m.suffix)),m.pattern?(t&&t.push(m),p||f?"+"===m.modifier||"*"===m.modifier?(d="*"===m.modifier?"?":"",u+="(?:"+p+"((?:"+m.pattern+")(?:"+f+p+"(?:"+m.pattern+"))*)"+f+")"+d):u+="(?:"+p+"("+m.pattern+")"+f+")"+m.modifier:u+="("+m.pattern+")"+m.modifier):u+="(?:"+p+f+")"+m.modifier)}return n?(o||(u+=l+"?"),u+=r.endsWith?"(?="+i+")":"$"):(n="string"==typeof(a=e[e.length-1])?-1<l.indexOf(a[a.length-1]):void 0===a,o||(u+="(?:"+l+"(?="+i+"))?"),n||(u+="(?="+l+"|"+i+")")),new RegExp(u,v(r))}function h(e,t,r){var o,a;if(e instanceof RegExp){var n=e,i=t;if(i){var s=n.source.match(/\((?!\?)/g);if(s)for(var l=0;l<s.length;l++)i.push({name:l,prefix:"",suffix:"",modifier:"",pattern:""})}return n}return Array.isArray(e)?(o=t,a=r,n=(n=e).map(function(e){return h(e,o,a).source}),new RegExp("(?:"+n.join("|")+")",v(a))):(t=t,c(u(e,e=r),t,e))}}function requirePathMatch(){if(!hasRequiredPathMatch){hasRequiredPathMatch=1,pathMatch.__esModule=!0,pathMatch.pathToRegexp=pathMatch.default=pathMatch.customRouteMatcherOptions=pathMatch.matcherOptions=void 0;var t=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=i();if(t&&t.has(e))return t.get(e);var r,o={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(r in e){var n;Object.prototype.hasOwnProperty.call(e,r)&&((n=a?Object.getOwnPropertyDescriptor(e,r):null)&&(n.get||n.set)?Object.defineProperty(o,r,n):o[r]=e[r])}o.default=e,t&&t.set(e,o);return o}(requirePathToRegexp());pathMatch.pathToRegexp=t;const r={sensitive:!1,delimiter:"/"},o={...pathMatch.matcherOptions=r,strict:!0};pathMatch.customRouteMatcherOptions=o;function i(){var e;return"function"!=typeof WeakMap?null:(e=new WeakMap,i=function(){return e},e)}pathMatch.default=(i=!1)=>e=>{const a=[];e=t.pathToRegexp(e,a,i?o:r);const n=t.regexpToFunction(e,a);return(e,t)=>{var r=null!=e&&n(e);if(!r)return!1;if(i)for(const o of a)"number"==typeof o.name&&delete r.params[o.name];return{...t,...r.params}}}}return pathMatch}var hasRequiredPrepareDestination,hasRequiredResolveRewrites,prepareDestination={};function requirePrepareDestination(){if(!hasRequiredPrepareDestination){hasRequiredPrepareDestination=1,prepareDestination.__esModule=!0,prepareDestination.matchHas=function(i,e,s){const l={},t=e.every(e=>{let t,r=e.key;switch(e.type){case"header":r=r.toLowerCase(),t=i.headers[r];break;case"cookie":t=i.cookies[e.key];break;case"query":t=s[r];break;case"host":var o=((null==i?void 0:i.headers)||{})["host"],o=null==o?void 0:o.split(":")[0].toLowerCase();t=o}if(!e.value&&t)return l[u(r)]=t,!0;if(t){var a=new RegExp(`^${e.value}$`);const n=t.match(a);if(n)return n.groups?Object.keys(n.groups).forEach(e=>{var t=u(e);t&&n.groups[e]&&(l[t]=n.groups[e])}):l[u(r||"host")]=n[0],!0}return!1});if(t)return l;return!1},prepareDestination.compileNonPath=x,prepareDestination.default=function(e,t,r,o){let a={};var n=(r=Object.assign({},r)).__nextLocale;{var i,s,l,u,c,h,p;delete r.__nextLocale,delete r.__nextDefaultLocale,a=e.startsWith("/")?(0,I.parseRelativeUrl)(e):({pathname:e,searchParams:i,hash:s,hostname:l,port:u,protocol:c,search:h,href:p}=new URL(e),{pathname:e,query:(0,S.searchParamsToUrlQuery)(i),hash:s,protocol:c,hostname:l,port:u,search:h,href:p})}const f=a.query,d=""+a.pathname+(a.hash||""),m=[],_=(q.pathToRegexp(d,m),m.map(e=>e.name));let v=q.compile(d,{validate:!1}),g;for(var[y,R]of Object.entries(f)){let e=Array.isArray(R)?R[0]:R;e=e&&x(e,t),f[y]=e}let w=Object.keys(t);n&&(w=w.filter(e=>"nextInternalLocale"!==e));if(o&&!w.some(e=>_.includes(e)))for(const b of w)b in f||(f[b]=t[b]);try{var[P,E]=(g=v(t)).split("#");a.pathname=P,a.hash=(E?"#":"")+(E||""),delete a.search}catch(e){if(e.message.match(/Expected .*? to not repeat, but got an array/))throw new Error("To use a multi-match in the destination you must add `*` at the end of the param name to signify it should repeat. https://nextjs.org/docs/messages/invalid-multi-match");throw e}return a.query={...r,...a.query},{newUrl:g,parsedDestination:a}},prepareDestination.getSafeParamName=void 0;var S=requireQuerystring(),I=requireParseRelativeUrl(),q=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=i();if(t&&t.has(e))return t.get(e);var r,o={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(r in e){var n;Object.prototype.hasOwnProperty.call(e,r)&&((n=a?Object.getOwnPropertyDescriptor(e,r):null)&&(n.get||n.set)?Object.defineProperty(o,r,n):o[r]=e[r])}o.default=e,t&&t.set(e,o);return o}(requirePathToRegexp());const u=t=>{let r="";for(let e=0;e<t.length;e++){var o=t.charCodeAt(e);(64<o&&o<91||96<o&&o<123)&&(r+=t[e])}return r};function i(){var e;return"function"!=typeof WeakMap?null:(e=new WeakMap,i=function(){return e},e)}function x(e,t){if(!e.includes(":"))return e;for(const r of Object.keys(t))e.includes(":"+r)&&(e=e.replace(new RegExp(`:${r}\\*`,"g"),`:${r}--ESCAPED_PARAM_ASTERISKS`).replace(new RegExp(`:${r}\\?`,"g"),`:${r}--ESCAPED_PARAM_QUESTION`).replace(new RegExp(`:${r}\\+`,"g"),`:${r}--ESCAPED_PARAM_PLUS`).replace(new RegExp(`:${r}(?!\\w)`,"g"),"--ESCAPED_PARAM_COLON"+r));return e=e.replace(/(:|\*|\?|\+|\(|\)|\{|\})/g,"\\$1").replace(/--ESCAPED_PARAM_PLUS/g,"+").replace(/--ESCAPED_PARAM_COLON/g,":").replace(/--ESCAPED_PARAM_QUESTION/g,"?").replace(/--ESCAPED_PARAM_ASTERISKS/g,"*"),q.compile("/"+e,{validate:!1})(t).substr(1)}prepareDestination.getSafeParamName=u}return prepareDestination}function requireResolveRewrites(){if(!hasRequiredResolveRewrites){hasRequiredResolveRewrites=1,resolveRewrites.__esModule=!0,resolveRewrites.default=function(o,a,t,n,i,s){let l=!1,u=(0,y.parseRelativeUrl)(o),c=(0,v.removePathTrailingSlash)((0,g.normalizeLocalePath)((0,R.delBasePath)(u.pathname),s).pathname),h;var r=e=>{var t;let r=w(e.source)(u.pathname);if(e.has&&r&&((t=(0,_.matchHas)({headers:{host:document.location.hostname},cookies:Object.fromEntries(document.cookie.split("; ").map(e=>{var[e,...t]=e.split("=");return[e,t.join("=")]}))},e.has,u.query))?Object.assign(r,t):r=!1),r)return!e.destination||(t=(0,_.default)(e.destination,r,n,!0),u=t.parsedDestination,o=t.newUrl,Object.assign(n,t.parsedDestination.query),c=(0,v.removePathTrailingSlash)((0,g.normalizeLocalePath)((0,R.delBasePath)(o),s).pathname),a.includes(c)?(l=!0,h=c,!0):(h=i(c))!==o&&a.includes(h)?l=!0:void 0)};let p=!1;for(let e=0;e<t.beforeFiles.length;e++){var f=t.beforeFiles[e];if(r(f)){p=!0;break}}if(!a.includes(c)){if(!p)for(let e=0;e<t.afterFiles.length;e++){var d=t.afterFiles[e];if(r(d)){p=!0;break}}if(p||(h=i(c),l=a.includes(h),p=l),!p)for(let e=0;e<t.fallback.length;e++){var m=t.fallback[e];if(r(m)){p=!0;break}}}return{asPath:o,parsedAs:u,matchedPage:l,resolvedHref:h}};var e=(e=requirePathMatch())&&e.__esModule?e:{default:e},_=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=i();if(t&&t.has(e))return t.get(e);var r,o={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(r in e){var n;Object.prototype.hasOwnProperty.call(e,r)&&((n=a?Object.getOwnPropertyDescriptor(e,r):null)&&(n.get||n.set)?Object.defineProperty(o,r,n):o[r]=e[r])}o.default=e,t&&t.set(e,o);return o}(requirePrepareDestination()),v=requireNormalizeTrailingSlash(),g=requireNormalizeLocalePath(),y=requireParseRelativeUrl(),R=requireRouter$1();const w=(0,e.default)(!0);function i(){var e;return"function"!=typeof WeakMap?null:(e=new WeakMap,i=function(){return e},e)}}return resolveRewrites}var hasRequiredRouteMatcher,routeMatcher={};function requireRouteMatcher(){return hasRequiredRouteMatcher||(hasRequiredRouteMatcher=1,routeMatcher.__esModule=!0,routeMatcher.getRouteMatcher=function(e){const{re:t,groups:i}=e;return e=>{const o=t.exec(e);if(!o)return!1;const a=t=>{try{return decodeURIComponent(t)}catch(e){t=new Error("failed to decode param");throw t.code="DECODE_FAILED",t}},n={};return Object.keys(i).forEach(e=>{var t=i[e],r=o[t.pos];void 0!==r&&(n[e]=~r.indexOf("/")?r.split("/").map(e=>a(e)):t.repeat?[a(r)]:a(r))}),n}}),routeMatcher}var hasRequiredRouteRegex,routeRegex={};function requireRouteRegex(){return hasRequiredRouteRegex||(hasRequiredRouteRegex=1,routeRegex.__esModule=!0,routeRegex.getRouteRegex=function(e){const t=(e.replace(/\/$/,"")||"/").slice(1).split("/"),a={};let n=1;e=t.map(e=>{var t,r,o;return e.startsWith("[")&&e.endsWith("]")?({key:t,optional:r,repeat:o}=c(e.slice(1,-1)),a[t]={pos:n++,repeat:o,optional:r},o?r?"(?:/(.+?))?":"/(.+?)":"/([^/]+?)"):"/"+u(e)}).join("");if("undefined"!=typeof window)return{re:new RegExp(`^${e}(?:/)?$`),groups:a};{let i=97,s=1;const l={};var r=t.map(r=>{if(r.startsWith("[")&&r.endsWith("]")){var{key:o,optional:a,repeat:n}=c(r.slice(1,-1));let e=o.replace(/\W/g,""),t=!1;return(0===e.length||30<e.length)&&(t=!0),(t=isNaN(parseInt(e.substr(0,1)))?t:!0)&&(e=(()=>{let t="";for(let e=0;e<s;e++)t+=String.fromCharCode(i),122<++i&&(s++,i=97);return t})()),l[e]=o,n?a?`(?:/(?<${e}>.+?))?`:`/(?<${e}>.+?)`:`/(?<${e}>[^/]+?)`}return"/"+u(r)}).join("");return{re:new RegExp(`^${e}(?:/)?$`),groups:a,routeKeys:l,namedRegex:`^${r}(?:/)?$`}}}),routeRegex;function u(e){return e.replace(/[|\\{}()[\]^$+*?.-]/g,"\\$&")}function c(e){var t=e.startsWith("[")&&e.endsWith("]"),r=(e=t?e.slice(1,-1):e).startsWith("...");return{key:e=r?e.slice(3):e,repeat:r,optional:t}}}var hasRequiredDetectDomainLocale,detectDomainLocale={};function requireDetectDomainLocale(){return hasRequiredDetectDomainLocale||(hasRequiredDetectDomainLocale=1,detectDomainLocale.__esModule=!0,detectDomainLocale.detectDomainLocale=function(e,t,r){let o;if(e){r=r&&r.toLowerCase();for(const n of e){var a=null==(a=n.domain)?void 0:a.split(":")[0].toLowerCase();if(t===a||r===n.defaultLocale.toLowerCase()||null!=(a=n.locales)&&a.some(e=>e.toLowerCase()===r)){o=n;break}}}return o}),detectDomainLocale}var hasRequiredReactIs_production_min,reactIsExports={},reactIs={get exports(){return reactIsExports},set exports(e){reactIsExports=e}},reactIs_production_min={};function requireReactIs_production_min(){var e,r,o,a,n,i,s,l,u,c,h,p,t,f,d,m,_,v,g;return hasRequiredReactIs_production_min||(hasRequiredReactIs_production_min=1,e="function"==typeof Symbol&&Symbol.for,r=e?Symbol.for("react.element"):60103,o=e?Symbol.for("react.portal"):60106,a=e?Symbol.for("react.fragment"):60107,n=e?Symbol.for("react.strict_mode"):60108,i=e?Symbol.for("react.profiler"):60114,s=e?Symbol.for("react.provider"):60109,l=e?Symbol.for("react.context"):60110,u=e?Symbol.for("react.async_mode"):60111,c=e?Symbol.for("react.concurrent_mode"):60111,h=e?Symbol.for("react.forward_ref"):60112,p=e?Symbol.for("react.suspense"):60113,t=e?Symbol.for("react.suspense_list"):60120,f=e?Symbol.for("react.memo"):60115,d=e?Symbol.for("react.lazy"):60116,m=e?Symbol.for("react.block"):60121,_=e?Symbol.for("react.fundamental"):60117,v=e?Symbol.for("react.responder"):60118,g=e?Symbol.for("react.scope"):60119,reactIs_production_min.AsyncMode=u,reactIs_production_min.ConcurrentMode=c,reactIs_production_min.ContextConsumer=l,reactIs_production_min.ContextProvider=s,reactIs_production_min.Element=r,reactIs_production_min.ForwardRef=h,reactIs_production_min.Fragment=a,reactIs_production_min.Lazy=d,reactIs_production_min.Memo=f,reactIs_production_min.Portal=o,reactIs_production_min.Profiler=i,reactIs_production_min.StrictMode=n,reactIs_production_min.Suspense=p,reactIs_production_min.isAsyncMode=function(e){return R(e)||y(e)===u},reactIs_production_min.isConcurrentMode=R,reactIs_production_min.isContextConsumer=function(e){return y(e)===l},reactIs_production_min.isContextProvider=function(e){return y(e)===s},reactIs_production_min.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},reactIs_production_min.isForwardRef=function(e){return y(e)===h},reactIs_production_min.isFragment=function(e){return y(e)===a},reactIs_production_min.isLazy=function(e){return y(e)===d},reactIs_production_min.isMemo=function(e){return y(e)===f},reactIs_production_min.isPortal=function(e){return y(e)===o},reactIs_production_min.isProfiler=function(e){return y(e)===i},reactIs_production_min.isStrictMode=function(e){return y(e)===n},reactIs_production_min.isSuspense=function(e){return y(e)===p},reactIs_production_min.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===c||e===i||e===n||e===p||e===t||"object"==typeof e&&null!==e&&(e.$$typeof===d||e.$$typeof===f||e.$$typeof===s||e.$$typeof===l||e.$$typeof===h||e.$$typeof===_||e.$$typeof===v||e.$$typeof===g||e.$$typeof===m)},reactIs_production_min.typeOf=y),reactIs_production_min;function y(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case u:case c:case a:case i:case n:case p:return e;default:switch(e=e&&e.$$typeof){case l:case h:case d:case f:case s:return e;default:return t}}case o:return t}}}function R(e){return y(e)===c}}var hasRequiredReactIs_development,hasRequiredReactIs,hasRequiredRouter$1,reactIs_development={};function requireReactIs_development(){var e,a,n,i,s,l,u,c,h,p,f,d,t,m,_,r,o,v,g,y,R,w,P,E,b,S,I,q,x,C,O;return hasRequiredReactIs_development||(hasRequiredReactIs_development=1,"production"!==process.env.NODE_ENV&&(e="function"==typeof Symbol&&Symbol.for,a=e?Symbol.for("react.element"):60103,n=e?Symbol.for("react.portal"):60106,i=e?Symbol.for("react.fragment"):60107,s=e?Symbol.for("react.strict_mode"):60108,l=e?Symbol.for("react.profiler"):60114,u=e?Symbol.for("react.provider"):60109,c=e?Symbol.for("react.context"):60110,h=e?Symbol.for("react.async_mode"):60111,p=e?Symbol.for("react.concurrent_mode"):60111,f=e?Symbol.for("react.forward_ref"):60112,d=e?Symbol.for("react.suspense"):60113,t=e?Symbol.for("react.suspense_list"):60120,m=e?Symbol.for("react.memo"):60115,_=e?Symbol.for("react.lazy"):60116,r=e?Symbol.for("react.block"):60121,o=e?Symbol.for("react.fundamental"):60117,v=e?Symbol.for("react.responder"):60118,g=e?Symbol.for("react.scope"):60119,e=p,y=c,R=u,w=a,P=f,E=i,b=_,S=m,I=n,q=l,x=s,C=d,O=!1,reactIs_development.AsyncMode=h,reactIs_development.ConcurrentMode=e,reactIs_development.ContextConsumer=y,reactIs_development.ContextProvider=R,reactIs_development.Element=w,reactIs_development.ForwardRef=P,reactIs_development.Fragment=E,reactIs_development.Lazy=b,reactIs_development.Memo=S,reactIs_development.Portal=I,reactIs_development.Profiler=q,reactIs_development.StrictMode=x,reactIs_development.Suspense=C,reactIs_development.isAsyncMode=function(e){return O||(O=!0,console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")),T(e)||L(e)===h},reactIs_development.isConcurrentMode=T,reactIs_development.isContextConsumer=function(e){return L(e)===c},reactIs_development.isContextProvider=function(e){return L(e)===u},reactIs_development.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===a},reactIs_development.isForwardRef=function(e){return L(e)===f},reactIs_development.isFragment=function(e){return L(e)===i},reactIs_development.isLazy=function(e){return L(e)===_},reactIs_development.isMemo=function(e){return L(e)===m},reactIs_development.isPortal=function(e){return L(e)===n},reactIs_development.isProfiler=function(e){return L(e)===l},reactIs_development.isStrictMode=function(e){return L(e)===s},reactIs_development.isSuspense=function(e){return L(e)===d},reactIs_development.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===p||e===l||e===s||e===d||e===t||"object"==typeof e&&null!==e&&(e.$$typeof===_||e.$$typeof===m||e.$$typeof===u||e.$$typeof===c||e.$$typeof===f||e.$$typeof===o||e.$$typeof===v||e.$$typeof===g||e.$$typeof===r)},reactIs_development.typeOf=L)),reactIs_development;function L(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case a:var r=e.type;switch(r){case h:case p:case i:case l:case s:case d:return r;default:var o=r&&r.$$typeof;switch(o){case c:case f:case _:case m:case u:return o;default:return t}}case n:return t}}}function T(e){return L(e)===p}}function requireReactIs(){var e;return hasRequiredReactIs||(hasRequiredReactIs=1,e=reactIs,"production"===process.env.NODE_ENV?e.exports=requireReactIs_production_min():e.exports=requireReactIs_development()),reactIsExports}function requireRouter$1(){if(!hasRequiredRouter$1){hasRequiredRouter$1=1,router$1.__esModule=!0,router$1.getDomainLocale=function(e,t,r,o){if(process.env.__NEXT_I18N_SUPPORT){t=t||(0,O.normalizeLocalePath)(e,r).detectedLocale;r=q(o,void 0,t);if(r)return`http${r.http?"":"s"}://`+r.domain+(_||"")+(t===r.defaultLocale?"":"/"+t)+e}return!1},router$1.addLocale=k,router$1.delLocale=A,router$1.hasBasePath=j,router$1.addBasePath=U,router$1.delBasePath=W,router$1.isLocalURL=F,router$1.interpolateAs=z,router$1.resolveHref=i,router$1.default=void 0;var x=requireNormalizeTrailingSlash(),C=requireRouteLoader(),o=requireDenormalizePagePath(),O=requireNormalizeLocalePath(),e=t(requireMitt()),L=requireUtils(),T=requireIsDynamic(),N=requireParseRelativeUrl(),u=requireQuerystring(),D=t(requireResolveRewrites()),M=requireRouteMatcher(),$=requireRouteRegex();let q;process.env.__NEXT_I18N_SUPPORT&&(q=requireDetectDomainLocale().detectDomainLocale);const _=process.env.__NEXT_ROUTER_BASEPATH||"",v=process.env.__NEXT_SCROLL_RESTORATION&&"undefined"!=typeof window&&"scrollRestoration"in window.history&&!!function(){try{var e="__next";return sessionStorage.setItem(e,e),sessionStorage.removeItem(e),1}catch(e){}}(),B=Symbol("SSG_DATA_NOT_FOUND");class G{constructor(e,t,r,{initialProps:o,pageLoader:a,App:n,wrapApp:i,Component:s,err:l,subscription:u,isFallback:c,locale:h,locales:p,defaultLocale:f,domainLocales:d,isPreview:m}){this.route=void 0,this.pathname=void 0,this.query=void 0,this.asPath=void 0,this.basePath=void 0,this.components=void 0,this.sdc={},this.sdr={},this.sub=void 0,this.clc=void 0,this.pageLoader=void 0,this._bps=void 0,this.events=void 0,this._wrapApp=void 0,this.isSsr=void 0,this.isFallback=void 0,this._inFlightRoute=void 0,this._shallow=void 0,this.locale=void 0,this.locales=void 0,this.defaultLocale=void 0,this.domainLocales=void 0,this.isReady=void 0,this.isPreview=void 0,this.isLocaleDomain=void 0,this._idx=0,this.onPopState=e=>{e=e.state;if(e){if(e.__N){let t;var{url:r,as:o,options:a,idx:n}=e;if(process.env.__NEXT_SCROLL_RESTORATION&&v&&this._idx!==n){try{sessionStorage.setItem("__next_scroll_"+this._idx,JSON.stringify({x:self.pageXOffset,y:self.pageYOffset}))}catch(e){}try{var i=sessionStorage.getItem("__next_scroll_"+n);t=JSON.parse(i)}catch(e){t={x:0,y:0}}}this._idx=n;const s=(0,N.parseRelativeUrl)(r)["pathname"];this.isSsr&&o===this.asPath&&s===this.pathname||this._bps&&!this._bps(e)||this.change("replaceState",r,o,Object.assign({},a,{shallow:a.shallow&&this._shallow,locale:a.locale||this.defaultLocale}),t)}}else{const{pathname:s,query:t}=this;void this.changeState("replaceState",(0,L.formatWithValidation)({pathname:U(s),query:t}),(0,L.getURL)())}},this.route=(0,x.removePathTrailingSlash)(e),this.components={},"/_error"!==e&&(this.components[this.route]={Component:s,initial:!0,props:o,err:l,__N_SSG:o&&o.__N_SSG,__N_SSP:o&&o.__N_SSP}),this.components["/_app"]={Component:n,styleSheets:[]},this.events=G.events,this.pageLoader=a,this.pathname=e,this.query=t;s=(0,T.isDynamicRoute)(e)&&self.__NEXT_DATA__.autoExport;this.asPath=s?e:r,this.basePath=_,this.sub=u,this.clc=null,this._wrapApp=i,this.isSsr=!0,this.isFallback=c,this.isReady=!(!self.__NEXT_DATA__.gssp&&!self.__NEXT_DATA__.gip&&(s||self.location.search)),this.isPreview=!!m,this.isLocaleDomain=!1,process.env.__NEXT_I18N_SUPPORT&&(this.locale=h,this.locales=p,this.defaultLocale=f,this.domainLocales=d,this.isLocaleDomain=!!q(d,self.location.hostname)),"undefined"!=typeof window&&("//"!==r.substr(0,2)&&this.changeState("replaceState",(0,L.formatWithValidation)({pathname:U(e),query:t}),(0,L.getURL)(),{locale:h}),window.addEventListener("popstate",this.onPopState),process.env.__NEXT_SCROLL_RESTORATION)&&v&&(window.history.scrollRestoration="manual")}reload(){window.location.reload()}back(){window.history.back()}push(e,t,r={}){if(process.env.__NEXT_SCROLL_RESTORATION&&v)try{sessionStorage.setItem("__next_scroll_"+this._idx,JSON.stringify({x:self.pageXOffset,y:self.pageYOffset}))}catch(e){}return{url:e,as:t}=H(this,e,t),this.change("pushState",e,t,r)}replace(e,t,r={}){return{url:e,as:t}=H(this,e,t),this.change("replaceState",e,t,r)}async change(n,i,s,l,u){if(!F(i))return window.location.href=i,!1;l._h&&(this.isReady=!0),l.scroll=!(null!=(c=l.scroll)&&!c);var c=l.locale!==this.locale;if(process.env.__NEXT_I18N_SUPPORT){this.locale=!1===l.locale?this.defaultLocale:l.locale||this.locale,void 0===l.locale&&(l.locale=this.locale);var h=(0,N.parseRelativeUrl)(j(s)?W(s):s),p=(0,O.normalizeLocalePath)(h.pathname,this.locales);p.detectedLocale&&(this.locale=p.detectedLocale,h.pathname=U(h.pathname),s=(0,L.formatWithValidation)(h),i=U((0,O.normalizeLocalePath)(j(i)?W(i):i,this.locales).pathname));let e=!1;!process.env.__NEXT_I18N_SUPPORT||null!=(p=this.locales)&&p.includes(this.locale)||(h.pathname=k(h.pathname,this.locale),window.location.href=(0,L.formatWithValidation)(h),e=!0);p=q(this.domainLocales,void 0,this.locale);if(process.env.__NEXT_I18N_SUPPORT&&!e&&p&&this.isLocaleDomain&&self.location.hostname!==p.domain&&(h=W(s),window.location.href=`http${p.http?"":"s"}://`+p.domain+U((this.locale===p.defaultLocale?"":"/"+this.locale)+("/"===h?"":h)||"/"),e=!0),e)return new Promise(()=>{})}l._h||(this.isSsr=!1),L.ST&&performance.mark("routeChange");var{shallow:p=!1}=l,h={shallow:p},p=(this._inFlightRoute&&this.abortComponentLoad(this._inFlightRoute,h),s=U(k(j(s)?W(s):s,l.locale,this.defaultLocale)),A(j(s)?W(s):s,this.locale));if(this._inFlightRoute=s,!l._h&&this.onlyAHashChange(p))return this.asPath=p,G.events.emit("hashChangeStart",s,h),this.changeState(n,i,s,l),this.scrollToHash(p),this.notify(this.components[this.route],null),G.events.emit("hashChangeComplete",s,h),!0;var e=(0,N.parseRelativeUrl)(i);let{pathname:f,query:d}=e,m,t;try{m=await this.pageLoader.getPageList(),{__rewrites:t}=await(0,C.getClientBuildManifest)()}catch(e){return window.location.href=s,!1}this.urlIsNew(p)||c||(n="replaceState");let _=s;"/_error"!==(f=f&&(0,x.removePathTrailingSlash)(W(f)))&&(process.env.__NEXT_HAS_REWRITES&&s.startsWith("/")?(c=(0,D.default)(U(k(W(s),this.locale)),m,t,d,e=>X(e,m),this.locales),_=c.asPath,c.matchedPage&&c.resolvedHref&&(f=c.resolvedHref,e.pathname=f,i=(0,L.formatWithValidation)(e))):(e.pathname=X(f,m),e.pathname!==f&&(f=e.pathname,i=(0,L.formatWithValidation)(e))));var v,g,y,c=(0,x.removePathTrailingSlash)(f);if(!F(s)){if("production"!==process.env.NODE_ENV)throw new Error(`Invalid href: "${i}" and as: "${s}", received relative href and external as`+`
See more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as`);return window.location.href=s,!1}if(_=A(W(_),this.locale),(0,T.isDynamicRoute)(c)){var e=(0,N.parseRelativeUrl)(_),r=e.pathname,o=(0,$.getRouteRegex)(c),a=(0,M.getRouteMatcher)(o)(r),R=c===r,w=R?z(c,r,d):{};if(!a||R&&!w.result){o=Object.keys(o.groups).filter(e=>!d[e]);if(0<o.length)throw"production"!==process.env.NODE_ENV&&console.warn(`${R?"Interpolating href":"Mismatching `as` and `href`"} failed to manually provide `+`the params: ${o.join(", ")} in the \`href\`'s \`query\``),new Error((R?`The provided \`href\` (${i}) value is missing query values (${o.join(", ")}) to be interpolated properly. `:`The provided \`as\` value (${r}) is incompatible with the \`href\` value (${c}). `)+"Read more: https://nextjs.org/docs/messages/"+(R?"href-interpolation-failed":"incompatible-href-as"))}else R?s=(0,L.formatWithValidation)(Object.assign({},e,{pathname:w.result,query:V(d,w.params)})):Object.assign(d,a)}G.events.emit("routeChangeStart",s,h);try{let e=await this.getRouteInfo(c,f,d,s,_,h),{error:t,props:r,__N_SSG:o,__N_SSP:a}=e;if((o||a)&&r){if(r.pageProps&&r.pageProps.__N_REDIRECT){var P=r.pageProps.__N_REDIRECT;if(P.startsWith("/")){var E,b,S=(0,N.parseRelativeUrl)(P);if(S.pathname=X(S.pathname,m),m.includes(S.pathname))return{url:E,as:b}=H(this,P,P),this.change(n,E,b,l)}return window.location.href=P,new Promise(()=>{})}if(this.isPreview=!!r.__N_PREVIEW,r.notFound===B){let t;try{await this.fetchComponent("/404"),t="/404"}catch(e){t="/_error"}e=await this.getRouteInfo(t,t,d,s,_,{shallow:!1})}}G.events.emit("beforeHistoryChange",s,h),this.changeState(n,i,s,l),"production"!==process.env.NODE_ENV&&(y=this.components["/_app"].Component,window.next.isPrerendered=y.getInitialProps===y.origGetInitialProps&&!e.Component.getInitialProps);var I=l.shallow&&this.route===c;if(l._h&&"/_error"===f&&500===(null==(v=self.__NEXT_DATA__.props)||null==(g=v.pageProps)?void 0:g.statusCode)&&null!=r&&r.pageProps&&(r.pageProps.statusCode=500),await this.set(c,f,d,p,e,u||(I||!l.scroll?null:{x:0,y:0})).catch(e=>{if(!e.cancelled)throw e;t=t||e}),t)throw G.events.emit("routeChangeError",t,p,h),t;return process.env.__NEXT_I18N_SUPPORT&&this.locale&&(document.documentElement.lang=this.locale),G.events.emit("routeChangeComplete",s,h),!0}catch(e){if(e.cancelled)return!1;throw e}}changeState(e,t,r,o={}){if("production"!==process.env.NODE_ENV){if(void 0===window.history)return void console.error("Warning: window.history is not available.");if(void 0===window.history[e])return void console.error(`Warning: window.history.${e} is not available`)}"pushState"===e&&(0,L.getURL)()===r||(this._shallow=o.shallow,window.history[e]({url:t,as:r,options:o,__N:!0,idx:this._idx="pushState"!==e?this._idx:this._idx+1},"",r))}async handleRouteInfoError(r,o,a,t,n,e){if(r.cancelled)throw r;if((0,C.isAssetError)(r)||e)throw G.events.emit("routeChangeError",r,t,n),window.location.href=t,s();try{let e,t;void 0!==e&&void 0!==t||({page:e,styleSheets:t}=await this.fetchComponent("/_error"));var i={props:void 0,Component:e,styleSheets:t,err:r,error:r};if(!i.props)try{i.props=await this.getInitialProps(e,{err:r,pathname:o,query:a})}catch(e){console.error("Error in error page `getInitialProps`: ",e),i.props={}}return i}catch(e){return this.handleRouteInfoError(e,o,a,t,n,!0)}}async getRouteInfo(t,r,o,a,n,i){try{var s=this.components[t];if(i.shallow&&s&&this.route===t)return s;var l=s&&"initial"in s?void 0:s,u=l||await this.fetchComponent(t).then(e=>({Component:e.page,styleSheets:e.styleSheets,__N_SSG:e.mod.__N_SSG,__N_SSP:e.mod.__N_SSP}));const{Component:p,__N_SSG:f,__N_SSP:d}=u;if("production"!==process.env.NODE_ENV){var c=requireReactIs()["isValidElementType"];if(!c(p))throw new Error(`The default export is not a React Component in page: "${r}"`)}let e;(f||d)&&(e=this.pageLoader.getDataHref((0,L.formatWithValidation)({pathname:r,query:o}),n,f,this.locale));var h=await this._getData(()=>f?this._getStaticData(e):d?this._getServerData(e):this.getInitialProps(p,{pathname:r,query:o,asPath:a}));return u.props=h,this.components[t]=u}catch(e){return this.handleRouteInfoError(e,r,o,a,i)}}set(e,t,r,o,a,n){return this.isFallback=!1,this.route=e,this.pathname=t,this.query=r,this.asPath=o,this.notify(a,n)}beforePopState(e){this._bps=e}onlyAHashChange(e){var t,r,o;return!!this.asPath&&([t,r]=this.asPath.split("#"),[e,o]=e.split("#"),!(!o||t!==e||r!==o)||t===e&&r!==o)}scrollToHash(e){var t,[,e]=e.split("#");""===e||"top"===e?window.scrollTo(0,0):(t=document.getElementById(e))?t.scrollIntoView():(t=document.getElementsByName(e)[0])&&t.scrollIntoView()}urlIsNew(e){return this.asPath!==e}async prefetch(t,e=t,r={}){var o,a,n=(0,N.parseRelativeUrl)(t);let i=n["pathname"];process.env.__NEXT_I18N_SUPPORT&&!1===r.locale&&(i=(0,O.normalizeLocalePath)(i,this.locales).pathname,n.pathname=i,t=(0,L.formatWithValidation)(n),a=(0,N.parseRelativeUrl)(e),o=(0,O.normalizeLocalePath)(a.pathname,this.locales),a.pathname=o.pathname,r.locale=o.detectedLocale||this.defaultLocale,e=(0,L.formatWithValidation)(a));const s=await this.pageLoader.getPageList();let l=e;process.env.__NEXT_HAS_REWRITES&&e.startsWith("/")?(o=(await(0,C.getClientBuildManifest)())["__rewrites"],a=(0,D.default)(U(k(e,this.locale)),s,o,n.query,e=>X(e,s),this.locales),l=A(W(a.asPath),this.locale),a.matchedPage&&a.resolvedHref&&(i=a.resolvedHref,n.pathname=i,t=(0,L.formatWithValidation)(n))):(n.pathname=X(n.pathname,s),n.pathname!==i&&(i=n.pathname,t=(0,L.formatWithValidation)(n)));e=(0,x.removePathTrailingSlash)(i);"production"===process.env.NODE_ENV&&await Promise.all([this.pageLoader._isSsg(e).then(e=>!!e&&this._getStaticData(this.pageLoader.getDataHref(t,l,!0,(void 0!==r.locale?r:this).locale))),this.pageLoader[r.priority?"loadPage":"prefetch"](e)])}async fetchComponent(e){let t=!1;var r=this.clc=()=>{t=!0},o=await this.pageLoader.loadPage(e);if(t)throw(e=new Error(`Abort fetching component for route: "${e}"`)).cancelled=!0,e;return r===this.clc&&(this.clc=null),o}_getData(e){let r=!1;const o=()=>{r=!0};return this.clc=o,e().then(e=>{var t;if(o===this.clc&&(this.clc=null),r)throw(t=new Error("Loading initial props cancelled")).cancelled=!0,t;return e})}_getStaticData(e){const t=new URL(e,window.location.href)["href"];return"production"===process.env.NODE_ENV&&!this.isPreview&&this.sdc[t]?Promise.resolve(this.sdc[t]):n(e,this.isSsr).then(e=>this.sdc[t]=e)}_getServerData(e){const t=new URL(e,window.location.href)["href"];return this.sdr[t]||(this.sdr[t]=n(e,this.isSsr).then(e=>(delete this.sdr[t],e)).catch(e=>{throw delete this.sdr[t],e}))}getInitialProps(e,t){var r=this.components["/_app"]["Component"],o=this._wrapApp(r);return t.AppTree=o,(0,L.loadGetInitialProps)(r,{AppTree:o,Component:e,router:this,ctx:t})}abortComponentLoad(e,t){this.clc&&(G.events.emit("routeChangeError",s(),e,t),this.clc(),this.clc=null)}notify(e,t){return this.sub(e,this.components["/_app"].Component,t)}}function t(e){return e&&e.__esModule?e:{default:e}}function s(){return Object.assign(new Error("Route Cancelled"),{cancelled:!0})}function a(e,t){return t&&e.startsWith("/")?"/"===e?(0,x.normalizePathTrailingSlash)(t):""+t+("/"===r(e)?e.substring(1):e):e}function k(e,t,r){return process.env.__NEXT_I18N_SUPPORT&&t&&t!==r&&!e.startsWith("/"+t+"/")&&e!=="/"+t?a(e,"/"+t):e}function A(e,t){return process.env.__NEXT_I18N_SUPPORT&&t&&(e.startsWith("/"+t+"/")||e==="/"+t)?e.substr(t.length+1)||"/":e}function r(e){var t=e.indexOf("?"),r=e.indexOf("#");return e=-1<t||-1<r?e.substring(0,-1<t?t:r):e}function j(e){return(e=r(e))===_||e.startsWith(_+"/")}function U(e){return a(e,_)}function W(e){return e=(e=e.slice(_.length)).startsWith("/")?e:"/"+e}function F(e){if(e.startsWith("/")||e.startsWith("#"))return!0;try{var t=(0,L.getLocationOrigin)(),r=new URL(e,t);return r.origin===t&&j(r.pathname)}catch(e){return!1}}function z(e,t,r){let n="";var o=(0,$.getRouteRegex)(e);const i=o.groups,s=(t!==e?(0,M.getRouteMatcher)(o)(t):"")||r;n=e;o=Object.keys(i);return o.every(e=>{let t=s[e]||"";var{repeat:r,optional:o}=i[e];let a=`[${r?"...":""}${e}]`;return o&&(a=`${t?"":"/"}[${a}]`),r&&!Array.isArray(t)&&(t=[t]),(o||e in s)&&(n=n.replace(a,r?t.map(e=>encodeURIComponent(e)).join("/"):encodeURIComponent(t))||"/")})||(n=""),{params:o,result:n}}function V(t,r){const o={};return Object.keys(t).forEach(e=>{r.includes(e)||(o[e]=t[e])}),o}function i(t,r,o){t=new URL(t,"http://n"),r="string"==typeof r?r:(0,L.formatWithValidation)(r);if(!F(r))return o?[r]:r;try{var a,n,i,s=new URL(r,t);s.pathname=(0,x.normalizePathTrailingSlash)(s.pathname);let e="";(0,T.isDynamicRoute)(s.pathname)&&s.searchParams&&o&&(a=(0,u.searchParamsToUrlQuery)(s.searchParams),{result:n,params:i}=z(s.pathname,s.pathname,a),n)&&(e=(0,L.formatWithValidation)({pathname:n,hash:s.hash,query:V(a,i)}));var l=s.origin===t.origin?s.href.slice(s.origin.length):s.href;return o?[l,e||l]:l}catch(e){return o?[r]:r}}function l(e){var t=(0,L.getLocationOrigin)();return e.startsWith(t)?e.substring(t.length):e}function H(e,t,r){let[o,a]=i(e.pathname,t,!0);var t=(0,L.getLocationOrigin)(),n=o.startsWith(t),t=a&&a.startsWith(t),n=(o=l(o),a=a&&l(a),n?o:U(o)),e=r?l(i(e.pathname,r)):a||o;return{url:n,as:t?e:U(e)}}function X(t,e){const r=(0,x.removePathTrailingSlash)((0,o.denormalizePagePath)(t));return"/404"===r||"/_error"===r?t:(e.includes(r)||e.some(e=>{if((0,T.isDynamicRoute)(e)&&(0,$.getRouteRegex)(e).re.test(r))return t=e,!0}),(0,x.removePathTrailingSlash)(t))}function n(e,t){return function t(r,o){return fetch(r,{credentials:"same-origin"}).then(e=>{if(e.ok)return e.json();if(1<o&&500<=e.status)return t(r,o-1);if(404===e.status)return e.json().then(e=>{if(e.notFound)return{notFound:B};throw new Error("Failed to load static props")});throw new Error("Failed to load static props")})}(e,t?3:1).catch(e=>{throw t||(0,C.markAssetError)(e),e})}(router$1.default=G).events=(0,e.default)()}return router$1}var hasRequiredRouterContext,router={},routerContext={};function requireRouterContext(){var e;return hasRequiredRouterContext||(hasRequiredRouterContext=1,routerContext.__esModule=!0,routerContext.RouterContext=void 0,e=((e=React__default.default)&&e.__esModule?e:{default:e}).default.createContext(null),routerContext.RouterContext=e,"production"!==process.env.NODE_ENV&&(e.displayName="RouterContext")),routerContext}var hasRequiredWithRouter,hasRequiredRouter,withRouter={};function requireWithRouter(){var e,o,a;return hasRequiredWithRouter||(hasRequiredWithRouter=1,e=requireInteropRequireDefault(),withRouter.__esModule=!0,withRouter.default=function(t){function e(e){return o.default.createElement(t,Object.assign({router:(0,a.useRouter)()},e))}{var r;e.getInitialProps=t.getInitialProps,e.origGetInitialProps=t.origGetInitialProps,"production"!==process.env.NODE_ENV&&(r=t.displayName||t.name||"Unknown",e.displayName=`withRouter(${r})`)}return e},o=e(React__default.default),a=requireRouter()),withRouter}function requireRouter(){if(!hasRequiredRouter){hasRequiredRouter=1;var e=interopRequireWildcard,t=requireInteropRequireDefault(),r=(router.__esModule=!0,router.useRouter=function(){return r.default.useContext(o.RouterContext)},router.makePublicRouterInstance=function(e){const r=e,o={};for(const t of s)"object"==typeof r[t]?o[t]=Object.assign(Array.isArray(r[t])?[]:{},r[t]):o[t]=r[t];return o.events=a.default.events,l.forEach(t=>{o[t]=(...e)=>r[t](...e)}),o},router.createRouter=router.withRouter=router.default=void 0,t(React__default.default)),a=e(requireRouter$1()),o=(router.Router=a.default,router.NextRouter=a.NextRouter,requireRouterContext()),e=t(requireWithRouter());router.withRouter=e.default;const i={router:null,readyCallbacks:[],ready(e){if(this.router)return e();"undefined"!=typeof window&&this.readyCallbacks.push(e)}},s=["pathname","route","query","asPath","components","isFallback","basePath","locale","locales","defaultLocale","isReady","isPreview","isLocaleDomain"];const l=["push","replace","reload","back","prefetch","beforePopState"];Object.defineProperty(i,"events",{get(){return a.default.events}}),s.forEach(e=>{Object.defineProperty(i,e,{get(){return n()[e]}})}),l.forEach(t=>{i[t]=(...e)=>{return n()[t](...e)}}),["routeChangeStart","beforeHistoryChange","routeChangeComplete","routeChangeError","hashChangeStart","hashChangeComplete"].forEach(o=>{i.ready(()=>{a.default.events.on(o,(...e)=>{var t="on"+o.charAt(0).toUpperCase()+o.substring(1),r=i;if(r[t])try{r[t](...e)}catch(e){console.error("Error when running the Router event: "+t),console.error(e.message+`
`+e.stack)}})})});t=i;router.default=t;function n(){if(i.router)return i.router;throw new Error('No router instance found.\nYou should only use "next/router" inside the client side of your app.\n')}router.createRouter=(...e)=>(i.router=new a.default(...e),i.readyCallbacks.forEach(e=>e()),i.readyCallbacks=[],i.router)}return router}var hasRequiredUseIntersection,useIntersection={};function requireUseIntersection(){if(hasRequiredUseIntersection)return useIntersection;hasRequiredUseIntersection=1,useIntersection.__esModule=!0,useIntersection.useIntersection=function({rootMargin:t,disabled:e}){const r=e||!u,o=(0,s.useRef)(),[a,n]=(0,s.useState)(!1),i=(0,s.useCallback)(e=>{o.current&&(o.current(),o.current=void 0),r||a||e&&e.tagName&&(o.current=function(e,t,r){const{id:o,observer:a,elements:n}=function(e){var t=e.rootMargin||"";var r=c.get(t);if(!r){const o=new Map;e=new IntersectionObserver(e=>{e.forEach(e=>{var t=o.get(e.target),e=e.isIntersecting||0<e.intersectionRatio;t&&e&&t(e)})},e);c.set(t,r={id:t,observer:e,elements:o})}return r}(r);return n.set(e,t),a.observe(e),function(){n.delete(e),a.unobserve(e),0===n.size&&(a.disconnect(),c.delete(o))}}(e,e=>e&&n(e),{rootMargin:t}))},[r,t,a]);return(0,s.useEffect)(()=>{if(!u&&!a){const e=(0,l.requestIdleCallback)(()=>n(!0));return()=>(0,l.cancelIdleCallback)(e)}},[a]),[i,a]};var s=React__default.default,l=requireRequestIdleCallback();const u="undefined"!=typeof IntersectionObserver;const c=new Map;return useIntersection}var _interopRequireWildcard=interopRequireWildcard,_react=(link.__esModule=!0,link.default=void 0,_interopRequireWildcard(React__default.default)),_router=requireRouter$1(),_router2=requireRouter(),_useIntersection=requireUseIntersection();const prefetched={};function prefetch(e,t,r,o){"undefined"!=typeof window&&e&&(0,_router.isLocalURL)(t)&&(e.prefetch(t,r,o).catch(e=>{if("production"!==process.env.NODE_ENV)throw e}),o=o&&void 0!==o.locale?o.locale:e&&e.locale,prefetched[t+"%"+r+(o?"%"+o:"")]=!0)}function isModifiedEvent(e){var t=e.currentTarget["target"];return t&&"_self"!==t||e.metaKey||e.ctrlKey||e.shiftKey||e.altKey||e.nativeEvent&&2===e.nativeEvent.which}function linkClicked(e,t,r,o,a,n,i,s){var l=e.currentTarget["nodeName"];("A"!==l||!isModifiedEvent(e)&&(0,_router.isLocalURL)(r))&&(e.preventDefault(),null==i&&(i=o.indexOf("#")<0),t[a?"replace":"push"](r,o,{shallow:n,locale:s,scroll:i}))}function Link$1(r){function o(e){return new Error(`Failed prop type: The prop \`${e.key}\` expects a ${e.expected} in \`<Link>\`, but got \`${e.actual}\` instead.`+("undefined"!=typeof window?"\nOpen your browser's console to view the Component stack trace.":""))}"production"!==process.env.NODE_ENV&&(Object.keys({href:!0}).forEach(e=>{if("href"===e&&(null==r[e]||"string"!=typeof r[e]&&"object"!=typeof r[e]))throw o({key:e,expected:"`string` or `object`",actual:null===r[e]?"null":typeof r[e]})}),Object.keys({as:!0,replace:!0,scroll:!0,shallow:!0,passHref:!0,prefetch:!0,locale:!0}).forEach(e=>{var t=typeof r[e];if("as"===e){if(r[e]&&"string"!=t&&"object"!=t)throw o({key:e,expected:"`string` or `object`",actual:t})}else if("locale"===e){if(r[e]&&"string"!=t)throw o({key:e,expected:"`string`",actual:t})}else if(("replace"===e||"scroll"===e||"shallow"===e||"passHref"===e||"prefetch"===e)&&null!=r[e]&&"boolean"!=t)throw o({key:e,expected:"`boolean`",actual:t})}),g=_react.default.useRef(!1),r.prefetch)&&!g.current&&(g.current=!0,console.warn("Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://nextjs.org/docs/messages/prefetch-true-deprecated"));const a=!1!==r.prefetch,n=(0,_router2.useRouter)(),i=n&&n.pathname||"/",{href:s,as:l}=_react.default.useMemo(()=>{var[e,t]=(0,_router.resolveHref)(i,r.href,!0);return{href:e,as:r.as?(0,_router.resolveHref)(i,r.as):t||e}},[i,r.href,r.as]);let{children:e,replace:t,shallow:u,scroll:c,locale:h}=r;"string"==typeof e&&(e=_react.default.createElement("a",null,e));const p=_react.Children.only(e),f=p&&"object"==typeof p&&p.ref,[d,m]=(0,_useIntersection.useIntersection)({rootMargin:"200px"});var _,v,g=_react.default.useCallback(e=>{d(e),f&&("function"==typeof f?f(e):"object"==typeof f&&(f.current=e))},[f,d]),g=((0,_react.useEffect)(()=>{var e=m&&a&&(0,_router.isLocalURL)(s),t=void 0!==h?h:n&&n.locale,r=prefetched[s+"%"+l+(t?"%"+t:"")];e&&!r&&prefetch(n,s,l,{locale:t})},[l,s,m,h,a,n]),{ref:g,onClick:e=>{p.props&&"function"==typeof p.props.onClick&&p.props.onClick(e),e.defaultPrevented||linkClicked(e,n,s,l,t,u,c,h)}});return g.onMouseEnter=e=>{(0,_router.isLocalURL)(s)&&(p.props&&"function"==typeof p.props.onMouseEnter&&p.props.onMouseEnter(e),prefetch(n,s,l,{priority:!0}))},!r.passHref&&("a"!==p.type||"href"in p.props)||(_=void 0!==h?h:n&&n.locale,v=n&&n.isLocaleDomain&&(0,_router.getDomainLocale)(l,_,n&&n.locales,n&&n.domainLocales),g.href=v||(0,_router.addBasePath)((0,_router.addLocale)(l,_,n&&n.defaultLocale))),_react.default.cloneElement(p,g)}var _default=Link$1,Link=(link.default=_default,link$1.exports=link,getDefaultExportFromCjs(linkExports));const pageLoaded=effectorNext.createEvent(),buttonClicked=effectorNext.createEvent(),effect=effectorNext.createEffect({handler(e){return Promise.resolve({value:e})}}),$data=effectorNext.createStore(null),enhance=($data.on(effect.done,(e,t)=>{t=t.result;return t}),effectorNext.forward({from:pageLoaded.map(()=>"value-from-server"),to:effect}),effectorNext.forward({from:buttonClicked.map(()=>"value-from-client"),to:effect}),effectorNext.withStart(pageLoaded));function HomePage(){var e=effectorReact.useStore($data),t=effectorReact.useEvent(buttonClicked);return React__default.default.createElement("div",null,React__default.default.createElement("h1",null,"Server Page"),React__default.default.createElement("h2",null,"Store state: ",JSON.stringify(e)),React__default.default.createElement("button",{onClick:t},"click to change store state"),React__default.default.createElement("br",null),React__default.default.createElement("br",null),React__default.default.createElement(Link,{href:"/static"},React__default.default.createElement("a",{href:"/static"},"to static page")))}var index=enhance(HomePage);exports.default=index;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
